# Ball and region set, moved by moveball.
:alias bx v0
:alias by v1
:alias dx v2
:alias dy v3
:alias top v4
:alias left v5
:alias right v6
:alias bottom v7
:alias balldata v7
    
:const BALLDATA_SIZE 8
:const BALLDATA_END 64

# Move set
:alias px v0
:alias py v1
:alias start v2
:alias finish v3
:alias mark v4
:alias direction v5
:alias start-target v6
:alias finish-target v7
:alias movedata v7

:alias tmp vd
:alias tmp2 ve
:alias tmp3 vc
:alias tmp4 vb
:alias tmp5 va

# Permanent
:alias sign vf


:macro for-each-ball action {
    tmp2 := 0
    loop
        i := b1
        i += tmp2
        load balldata
        if dx != 0 begin
            action
            i := b1
            i += tmp2
            save balldata
            tmp2 += BALLDATA_SIZE
        else 
            tmp2 := BALLDATA_END
        end
        while tmp2 != BALLDATA_END
    again
}

:macro draw-ball {
    i := dot
    sprite bx by 1
}

:macro init-level {
    for-each-ball draw-ball
}

:macro move-all {
    for-each-ball moveball
}

:macro draw-crosshair {
    i := crosshair
    sprite px py 2
    px -= 1
    py -= 1
    sprite px py 2
    px += 1
    py += 1
}


# For each region, check if we are inside it horizontally
# Put the dimension you want to check in v5
# 1 = horizontal
# 2 = vertical
# If a region match is bound, the appropriate boundaries in the moveset will be
# updated.
: check-in-region
    tmp2 := 0
    tmp3 := px
    tmp4 := py
    loop
        i := b1
        i += tmp2
        load balldata
        if dx != 0 begin
            if tmp3 < right begin
                if tmp3 > left begin
                    if tmp4 < bottom begin
                        if tmp4 > top begin
                            v0 := tmp5
                            if v0 == 1 begin
                                v1 := left
                                v2 := right
                            else
                                v1 := top
                                v2 := bottom 
                            end
                            i := movetargets
                            save v2
                            jump done-check-in-region
                        end
                    end
                end
            end

            tmp2 += BALLDATA_SIZE
        else 
            jump done-check-in-region
        end
        while tmp2 != BALLDATA_END
    again
: done-check-in-region
;

# Active set: moveset
:macro vertical {
    tmp5 := 2
    check-in-region
    i := moveset
    load movedata
    if direction == 2 begin
        draw-crosshair
        start := py
        finish := py
        mark := px
        i := dot
        sprite px py 1
    end
}

:macro horizontal {
    tmp5 := 1
    check-in-region
    i := moveset
    load movedata
    if direction == 1 begin
        draw-crosshair
        start := px
        finish := px
        mark := py
        i := dot
        sprite px py 1
    end
}

:macro split-regions bc start fin {
    i := moveset
    save movedata
    tmp2 := mark
    tmp3 := 0

    loop
        i := b1
        i += tmp3
        load balldata

        if bc <= tmp2 begin
            if tmp2 < fin then fin := tmp2
        end
        if bc >= tmp2 begin
            if tmp2 > start then start := tmp2
        end

        save balldata
        tmp3 += BALLDATA_SIZE
        while tmp3 != BALLDATA_END
    again

    
    i := moveset
    load movedata
}

# Active set: moveset
:macro horizontal-step {
    i := dot
    tmp := 0
    if start != start-target begin start -= 1 sprite start mark 1 tmp += 1 end
    if start != start-target begin start -= 1 sprite start mark 1 tmp += 1 end
    if start != start-target begin start -= 1 sprite start mark 1 tmp += 1 end
    if start != start-target begin start -= 1 sprite start mark 1 tmp += 1 end
    if finish != finish-target begin finish += 1 sprite finish mark 1 tmp += 1 end
    if finish != finish-target begin finish += 1 sprite finish mark 1 tmp += 1 end
    if finish != finish-target begin finish += 1 sprite finish mark 1 tmp += 1 end
    if finish != finish-target begin finish += 1 sprite finish mark 1 tmp += 1 end
    if tmp == 0 begin
        draw-crosshair
        direction := 0
        split-regions by top bottom
    end
}

# Active set: moveset
:macro vertical-step {
    tmp := 0
    i := dot
    if start != start-target begin start -= 1 sprite mark start 1 tmp += 1 end
    if start != start-target begin start -= 1 sprite mark start 1 tmp += 1 end
    if finish != finish-target begin finish += 1 sprite mark finish 1 tmp += 1 end
    if finish != finish-target begin finish += 1 sprite mark finish 1 tmp += 1 end
    if tmp == 0 begin
        draw-crosshair
        direction := 0
        split-regions bx left right

    end
}

:macro move-crosshair coord amt bound boundfix {
    draw-crosshair
    coord += amt
    if coord == bound then coord := boundfix
    draw-crosshair
}

# Go through the balls until one isn't one, turn it on
:macro next-level {
    # Undraw all current balls
    init-level
    
    tmp := 0
    loop
        i := b1
        i += tmp
        load balldata
        if dx == 0 begin
            dx := 1
            dy := 1
            tmp := BALLDATA_END
            save balldata
            init-level
        else
            tmp += BALLDATA_SIZE
        end
        while tmp != BALLDATA_END
    again
    tmp := OCTO_KEY_2 
    i := moveset
    load movedata
    loop
        while tmp key 
    again
}

# Clobbers v0-v5
:macro check-keys {
    i := moveset
    load movedata
    if direction == 0 begin
        tmp := OCTO_KEY_W if tmp key begin move-crosshair py -1 255 0 end
        tmp := OCTO_KEY_S if tmp key begin move-crosshair py 1 32 31 end
        tmp := OCTO_KEY_A if tmp key begin move-crosshair px -1 255 0 end
        tmp := OCTO_KEY_D if tmp key begin move-crosshair px 1 64 63 end
        tmp := OCTO_KEY_Q if tmp key begin vertical end
        tmp := OCTO_KEY_E if tmp key begin horizontal end
        tmp := OCTO_KEY_2 if tmp key begin next-level end
        #tmp := OCTO_KEY_1 if tmp key begin prev-level end
    end
    i := moveset
    save movedata
}

:macro check-lines {
    i := moveset
    load movedata
    if direction == 1 begin horizontal-step end
    if direction == 2 begin vertical-step end
    i := moveset
    save movedata
}

#

### Boundary crossing notes:
# The math is simple, and we can use the same pattern for both directions, 
# but there's a lot to keep track of.
# Consider the x dimension:
# We are either moving left (decreasing) or moving right (increasing).
#
# First, we subtract the boundary from the coordinate, so that we're working
# relative to a boundary of 0.
#
# Now, we add the speed to the coordinate.
# 
# The movement results in a crossing based on the value of the vf carry flag. BUT, 
# the value expect depends on the direction of movement. If we were moving left,
# Then when we cross, we expect to *not* get the carry flag.
# For example:
#   x = 5, dx = -2, left = 4. 
#   We adjusted for the boundary, so x = 1.
#   x + dx ->   
#   1 + -2 -> 
#   0x01 + 0xFE -> 0xFF. Note that there was no carry!
#   In other words, adding -2 gives the same vf as subtracting 2. 
#
#   For a non cross:
#   x = 5 dx = -1 left = 3
#   x = 2 after bounds adjust.
#   x + dx -> 2 + -2 -> 0x02 + 0xFE -> 0x00 -- a carry!
#
#   We only check left bound when moving left and right bound when moving right, so 
#   there's no need for the math to work out on the opposite boundaries (and no need 
#  do those pointless checks).



### Single macro to handle bounds check.
# coord: the current value of the coordinate checked
# velo: the speed along the dimension
# bound: the bound we are checking against
# expect: the carry flag the indicates a hit (see notes above)
:macro checkbound coord velo bound hitwhencarryis {
    # do math to calculate a boundary crossing.
    coord -= bound
    coord += velo
    if vf == hitwhencarryis begin 
        # clip to bound
        coord := bound
        # negate velocity
        tmp := 0
        velo =- tmp
        # TODO - maybe random it up a little?
    else
        coord += bound
    end	
}

### Call the appropriate checkbound for a coordinate
:macro ud2 coordinate velocity boundStart boundEnd {
    # Find sign of velocity
    # Shifts left one, MSB goes into vF (sign)
    # We're ready for both shift behaviors!
    sign := velocity
    sign <<= velocity

    if sign == 1 begin
        # We are moving to the left, or up (decreasing coord)
        # So check for corssing the start/minimum boundary
        checkbound coordinate velocity boundStart 0
        else 
        # We are moving to the right, or down (increasing coord)
        # So check for corssing the end/maximum boundary
        checkbound coordinate velocity boundEnd 1
    end
}

: moveball
    i := dot
    sprite bx by 1
    ud2 bx dx left right
    ud2 by dy top bottom
    i := dot
    sprite bx by 1
;

# repack as 
# x dx l r y dy t b
# So we can do smaller loads
#  x y dx dy t l r b
# dx/dy == 0 signals ball not yet active
# and we assume that all subsequence aren't either
: b1
    3 3 -1 2 0 0 63 31
: b2
    35 11 -2 1 0 0 63 31
: b3
    17 21 0 0 0 0 63 31
: b4
    45 20 0 0 0 0 63 31
: b5
    0 0 0 0 0 0 63 31
: b6
    0 0 0 0 0 0 63 31
: b7
    0 0 0 0 0 0 63 31
: b8
    0 0 0 0 0 0 63 31
: b-end

: moveset
# px py start end mark direction(1=h, 2=v) 
  10 10  

  0     0   

  0   
: movetargets
  0
  0    0

: dot
    0x80

# .X.
# X.X
# .X.
#
# As .X
#    X.
# drawn twice.

: crosshair
            0x40
            0x80

: main
    i := moveset
    load v6
    draw-crosshair
    init-level

    loop
        check-keys

        tmp := delay
        if tmp == 0 begin
            check-lines
            move-all
            tmp := 3
            delay := tmp
        end

    again


