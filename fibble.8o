:const BALLDATA_SIZE 8
:const BALLDATA_END 64
:const SHOULD_FILL_MASK_START 1
:const SHOULD_FILL_MASK_FINISH 2
:const DRAW_HORIZONTAL 1
:const DRAW_VERTICAL 2


### Common register sets ###
# A set of data about one of the balls.
# Swapped in during the move calculations.
:alias bx v0
:alias by v1
:alias dx v2
:alias dy v3
:alias top v4
:alias left v5
:alias right v6
:alias bottom v7
:alias balldata v7
    

# Player data set
# Swapped in during movement key handling and line drawing.
:alias px v0
:alias py v1
:alias start v2
:alias finish v3
:alias direction v4
:alias start-target v5
:alias finish-target v6
:alias mark v7
:alias movedata v7

:alias tmp vd
:alias tmp2 ve

# Permanent
:alias sign vf

# Fill data
:alias fillstartx v0
:alias fillendx v1
:alias fillstarty v2
:alias fillendy v3
:alias fillshouldfill v4
:alias filldata v4


:macro draw-crosshair {
    i := crosshair
    sprite px py 2
    px -= 1
    py -= 1
    sprite px py 2
    px += 1
    py += 1
}


####################
### LINE DRAWING ###
####################

# Run on each loop to draw part of a player line
:macro check-lines {
    i := moveset
    load movedata
    if direction == 1 begin horizontal-step end
    if direction == 2 begin vertical-step end
    i := moveset
    save movedata
}


########################
### LINE ACTION INIT ###
########################

# Used by maybe-start-line-drawing to decide if the player is 
# In an unfilled region, and so could draw a line.
# For each active region, we check that px, py are full 
# in the bounds of that region.
# If they are, we save the line-drawing bounds, and the drawing
# direction into the movetargets.
# This includes setting the direction of moveset to check-direction,
# which will signal for the move to proceed.
:alias check-player-x vc
:alias check-player-y vb
:alias check-direction va
: check-in-region
    tmp2 := 0
    check-player-x := px
    check-player-y := py
    loop
        i := b1
        i += tmp2
        load balldata

        if dx == 0 then return

        if check-player-x >= right then jump next-check
        if check-player-x <= left then jump next-check
        if check-player-y >= bottom then jump next-check
        if check-player-y <= top then jump next-check

        if check-direction == DRAW_HORIZONTAL begin
            v3 := left # left is v5, set before overwriting
            v0 := check-player-x 
            v1 := check-player-x
            v2 := check-direction 
            v4 := right
            v5 := check-player-y
        else
            v3 := top # top is v4, set before overwriting
            v0 := check-player-y
            v1 := check-player-y 
            v2 := check-direction 
            v4 := bottom
            v5 := check-player-x
        end
        i := movetargets
        save v5
        return

        : next-check
        tmp2 += BALLDATA_SIZE
        while tmp2 != BALLDATA_END
    again
;

# in check-direction = 1 - horizontal
#           2 - vertical
: maybe-start-line-drawing
    check-in-region
    i := moveset
    load movedata
    if direction == check-direction begin
        # undraw crosshair
        draw-crosshair

        # first dot for the player line
        i := dot
        sprite px py 1
    end
;


# Called from split-regions, assumes that the ball data
# set at b1 + split-balldata-offset was previously loaded, and will restore it.
:macro handle-region-split bound coord fillloc mask {
    # Save the provided bound to the provided location.
    # This is going to be one of the fill boundaries.
    v0 := bound
    i := fillloc
    save v0

    # Save a mask that indicates the direction that we shrunk.
    i := filldatashouldfill
    load v0
    v1 := mask
    v0 |= v1
    save v0

    # Restore ball data.
    i := b1
    i += split-balldata-offset
    load v1
    bound := coord
}

:alias splitting-x ve
:alias splitting-y vd
:alias splitting-direction vc
:alias split-balldata-offset va

# Called when a line-drawing sequence has finished (reached bounds on both sides
# This goes through each active ball region and determines if we have reduced the 
# size of this region. Resizes the region for each ball as appropriate. 

# As it's going, it also tracks whether a region shrink leaves any area with no 
# balls in it. This information is recorded in filldata.
: split-regions
    splitting-x := px
    splitting-y := py
    splitting-direction := direction
    split-balldata-offset := 0
    
    i := moveset
    save movedata

    if direction == 1 begin
        v0 := start-target    # filldatastartx
        v1 := finish-target   # filldataendx
        v2 := splitting-y     # filldatastarty
        v3 := splitting-y     # filldataendy
    else 
        v0 := splitting-x     # filldatastartx
        v1 := splitting-x     # filldataendx
        v2 := start-target    # filldatastarty
        v3 := finish-target   # filldataendy
    end
    v4 := 0 # should fill
    i := fillset
    save filldata


    loop
        i := b1
        i += split-balldata-offset
        load balldata
        
        if dx == 0 then jump next-regions
        if splitting-x <= left then jump next-regions
        if splitting-x >= right then jump next-regions
        if splitting-y <= top then jump next-regions
        if splitting-y >= bottom then jump next-regions

        # splitting horizontal 
        if splitting-direction == DRAW_HORIZONTAL begin
            if by <= splitting-y begin
                if splitting-y < bottom begin 
                    handle-region-split bottom splitting-y filldataendy SHOULD_FILL_MASK_FINISH
                end
            end
            if by >= splitting-y begin
                if splitting-y > top begin 
                    handle-region-split top splitting-y filldatastarty SHOULD_FILL_MASK_START
                end
            end
        end

        # splitting vertical
        if splitting-direction == DRAW_VERTICAL begin
            if bx <= splitting-x begin
                if splitting-x < right begin
                    handle-region-split right splitting-x filldataendx SHOULD_FILL_MASK_FINISH
                end
            end
            if bx >= splitting-x begin
                if splitting-x > left begin
                    handle-region-split left splitting-x filldatastartx SHOULD_FILL_MASK_START
                end
            end
        end

        save balldata
        : next-regions
        split-balldata-offset += BALLDATA_SIZE
        while split-balldata-offset != BALLDATA_END
    again

    runfill
    
    i := moveset
    load movedata
;

# Active set: moveset
:alias steps-taken ve
:macro horizontal-step {
    i := dot
    steps-taken := 0
    if start != start-target begin start -= 1 sprite start py 1 steps-taken += 1 end
    if start != start-target begin start -= 1 sprite start py 1 steps-taken += 1 end
    if start != start-target begin start -= 1 sprite start py 1 steps-taken += 1 end
    if finish != finish-target begin finish += 1 sprite finish py 1 steps-taken += 1 end
    if finish != finish-target begin finish += 1 sprite finish py 1 steps-taken += 1 end
    if finish != finish-target begin finish += 1 sprite finish py 1 steps-taken += 1 end
    if steps-taken == 0 begin
        draw-crosshair
        split-regions 
        direction := 0
    end
}

# Active set: moveset
:macro vertical-step {
    steps-taken := 0
    i := dot
    if start != start-target begin start -= 1 sprite px start 1 steps-taken += 1 end
    if start != start-target begin start -= 1 sprite px start 1 steps-taken += 1 end
    if start != start-target begin start -= 1 sprite px start 1 steps-taken += 1 end
    if finish != finish-target begin finish += 1 sprite px finish 1 steps-taken += 1 end
    if finish != finish-target begin finish += 1 sprite px finish 1 steps-taken += 1 end
    if finish != finish-target begin finish += 1 sprite px finish 1 steps-taken += 1 end
    if steps-taken == 0 begin
        draw-crosshair
        split-regions 
        direction := 0

    end
}

:macro move-crosshair coord amt bound boundfix {
    draw-crosshair
    coord += amt
    if coord == bound then coord := boundfix
    draw-crosshair
}

# Go through the balls until one isn't one, turn it on
:alias ball-was-active ve
:macro next-level {
    v0 := 0
    v1 := 0
    i := score
    save v1
    tmp := 0
    loop
        i := b1
        i += tmp
        load balldata
        ball-was-active := dx
        px := random 0x3f
        py := random 0x1f
        dx := random 0x1
        dx += 1
        dy := random 0x1
        dy += 1
        top := 0
        left := 0
        right := 0x3F
        bottom := 0x1F
        save balldata
        v0 := v0
        i := dot
        sprite px py 1
        if ball-was-active == 0 begin
            tmp := BALLDATA_END
        else
            tmp += BALLDATA_SIZE
        end
        while tmp != BALLDATA_END
    again
    i := moveset
    load movedata
}

# Clobbers v0-v5
:macro check-keys {
    i := moveset
    load movedata
    if direction == 0 begin
        tmp := OCTO_KEY_W if tmp key begin move-crosshair py -1 255 0 end
        tmp := OCTO_KEY_S if tmp key begin move-crosshair py 1 32 31 end
        tmp := OCTO_KEY_A if tmp key begin move-crosshair px -1 255 0 end
        tmp := OCTO_KEY_D if tmp key begin move-crosshair px 1 64 63 end
        tmp := OCTO_KEY_Q if tmp key begin check-direction := 2 maybe-start-line-drawing end
        tmp := OCTO_KEY_E if tmp key begin check-direction := 1 maybe-start-line-drawing end
    end
    i := moveset
    save movedata
}

# Messes up:
# Fill in an area of the screen.
:alias fillx v4
:alias filly v5
:alias dotwidth v6
:alias score-add-lo v7
:alias score-add-hi v8
: runfill

    i := score
    load v1
    score-add-lo := v0
    score-add-hi := v1

    i := fillset
    load filldata

    # Split with ball to left/top sets 1
    # Split with ball to right/bottom sets 2
    # If neither bit is set we don't fill - although probably something went wrong in this case.
    # If both bits are set we don't fill - there's a ball on both sides still.
    if fillshouldfill == 0 then return
    if fillshouldfill == 3 then return

    if fillshouldfill == 1 begin
    end

    if fillshouldfill == 2 begin
    end

    fillx := fillstartx
    filly := fillstarty


# Fill from left to right,
# in Top-to-bottoms stripes
    loop
        # Calculate the stripewidth. If there's a lot left to fill, it's 8.
        # Otherwise, it is the amount left to fill.
        dotwidth := fillendx 
        dotwidth -= fillx
        if dotwidth > 8 then dotwidth := 8

        # Get the graphic location corresponding to this vertical stripe.
        i := beforedots 
        i += dotwidth

        loop
            sprite fillx filly 1

            score-add-lo += dotwidth
            if vf == 1 then score-add-hi += 1

            while filly != fillendy
            filly += 1
        again

        # We hit the bottom, move over
        fillx += dotwidth
        filly := fillstarty

        while fillx < fillendx
    again

    if score-add-hi == 7 then jump level-clear 
    v0 := score-add-lo
    v1 := score-add-hi
    i := score
    save v1
    v0 := v0

;


############################
### BALL MOVING ROUTINES ###
############################


# v8-vb hold information needed to 
# determine if a ball is crossing
# a line that's being drawn.
# The ball data set is v0-v7, so
# we start at v8.
:alias movecalc-start v8
:alias movecalc-finish v9
:alias movecalc-direction va
:alias movecalc-mark vb
# Set for-each-ball-action to a valid call
# And then call this
: move-all 
    movecalc-start := start
    movecalc-finish := finish
    movecalc-direction := direction
    if direction == 1 then movecalc-mark := py
    if direction == 2 then movecalc-mark := px

    tmp := 0
    loop
        i := b1
        i += tmp
        load balldata
        if dx != 0 begin
            moveball
            i := b1
            i += tmp
            save balldata
            tmp += BALLDATA_SIZE
        else 
            tmp := BALLDATA_END
        end
        while tmp != BALLDATA_END
    again
;

### Boundary crossing notes:
# The math is simple, and we can use the same pattern for both directions, 
# but there's a lot to keep track of.
# Consider the x dimension:
# We are either moving left (decreasing) or moving right (increasing).
#
# First, we subtract the boundary from the coordinate, so that we're working
# relative to a boundary of 0.
#
# Now, we add the speed to the coordinate.
# 
# The movement results in a crossing based on the value of the vf carry flag. BUT, 
# the value expect depends on the direction of movement. If we were moving left,
# Then when we cross, we expect to *not* get the carry flag.
# For example:
#   x = 5, dx = -2, left = 4. 
#   We adjusted for the boundary, so x = 1.
#   x + dx ->   
#   1 + -2 -> 
#   0x01 + 0xFE -> 0xFF. Note that there was no carry!
#   In other words, adding -2 gives the same vf as subtracting 2. 
#
#   For a non cross:
#   x = 5 dx = -1 left = 3
#   x = 2 after bounds adjust.
#   x + dx -> 2 + -2 -> 0x02 + 0xFE -> 0x00 -- a carry!
#
#   We only check left bound when moving left and right bound when moving right, so 
#   there's no need for the math to work out on the opposite boundaries (and no need 
#  do those pointless checks).



### Single macro to handle bounds check.
# coord: the current value of the coordinate checked
# velo: the speed along the dimension
# bound: the bound we are checking against
# expect: the carry flag the indicates a hit (see notes above)
:macro checkbound coord velo bound hitwhencarryis {
    # do math to calculate a boundary crossing.
    coord -= bound
    coord += velo
    if vf == hitwhencarryis begin 
        # clip to bound
        coord := bound
        # negate velocity
        tmp2 := 0
        velo =- tmp2
        # TODO - maybe random it up a little?
    else
        coord += bound
    end	
}

### Call the appropriate checkbound for a coordinate
:macro ud2 coordinate velocity boundStart boundEnd {
    # Find sign of velocity
    # Shifts left one, MSB goes into vF (sign)
    # We're ready for both shift behaviors!
    sign := velocity
    sign <<= velocity

    if sign == 1 begin
        # We are moving to the left, or up (decreasing coord)
        # So check for corssing the start/minimum boundary
        checkbound coordinate velocity boundStart 0
        else 
        # We are moving to the right, or down (increasing coord)
        # So check for corssing the end/maximum boundary
        checkbound coordinate velocity boundEnd 1
    end
}

: hmoveball
    if movecalc-direction != DRAW_VERTICAL then jump hjustdraw

    if by < movecalc-start then jump hjustdraw
    if by > movecalc-finish then jump hjustdraw

    if bx < movecalc-mark begin
        ud2 bx dx left right
        if bx >= movecalc-mark then jump lose
        return
    end

    if bx > movecalc-mark begin
        ud2 bx dx left right
        if bx <= movecalc-mark then jump lose
        return
    end
        
    : hjustdraw 
    ud2 bx dx left right
;

: vmoveball
    if movecalc-direction != DRAW_HORIZONTAL then jump vjustdraw

    if bx < movecalc-start then jump vjustdraw
    if bx > movecalc-finish then jump vjustdraw

    if by < movecalc-mark begin
        ud2 by dy top bottom
        if by >= movecalc-mark then jump lose
        return
    end

    if by > movecalc-mark begin
        ud2 by dy top bottom
        if by <= movecalc-mark then jump lose
        return
    end
        
    : vjustdraw 
    ud2 by dy top bottom
;

: moveball
    i := dot
    sprite bx by 1
    hmoveball
    vmoveball
    i := dot
    sprite bx by 1
;

: lose
    v0 := random 0xFF
    v1 := random 0xFF
    i := b1
    i += v0 
    sprite v0 v1 8
    jump lose


: level-clear
    clear
    i := level
    load v0
    v0 += 1
    save v0
    i := hex v0
    sprite v0 v0 5
    v0 := key
    loop
        while v0 key
    again
    clear
    jump main
;
# repack as 
# x dx l r y dy t b
# So we can do smaller loads
#  x y dx dy t l r b
# dx/dy == 0 signals ball not yet active
# and we assume that all subsequence aren't either
: b1
    0 0 0 0 0 0 63 31
: b2
    0 0 0 0 0 0 63 31
: b3
    0 0 0 0 0 0 63 31
: b4
    0 0 0 0 0 0 63 31
: b5
    0 0 0 0 0 0 63 31
: b6
    0 0 0 0 0 0 63 31
: b7
    0 0 0 0 0 0 63 31
: b8
    0 0 0 0 0 0 63 31
: b-end

: moveset
# px py 
  10 10  
: movetargets
# start end 
  0     0   
# direction(1=h, 2=v) 
  0
# start-target end-target
  0    0
# mark
  0

: score
  0 0

: level
  0

: fillset
# x bounds for fill
: filldatastartx
  0 
: filldataendx
  0
# y bounds for fill
: filldatastarty
  0
: filldataendy
  0
: filldatashouldfill
  0

: beforedots 0xFF
# Various width "dots" for the remainder part of the fill routine.
: dot 0x80 
: dot2 0xC0 
: dot3 0xE0
: dot4 0xF0
: dot5 0xF8
: dot6 0xFC
: dot7 0xFE
: dot8 0xFF
: data

# .X.
# X.X
# .X.
#
# As .X
#    X.
# drawn twice.

: crosshair
            0x40
            0x80

:alias delay-check ve
: main
    px := 0x20
    py := 0x10
    direction := 0
    draw-crosshair
    i := moveset
    save movedata
    next-level

    loop
        check-keys

        delay-check := delay
        if delay-check == 0 begin
            check-lines
            move-all
            delay-check := 3
            delay := delay-check
        end

    again


